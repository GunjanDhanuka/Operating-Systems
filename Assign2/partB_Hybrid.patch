diff -ruN xv6-public/.gitignore x/.gitignore
--- xv6-public/.gitignore	1970-01-01 05:30:00.000000000 +0530
+++ x/.gitignore	2022-10-06 18:55:26.110000000 +0530
@@ -0,0 +1,16 @@
+*~
+_*
+*.o
+*.d
+*.asm
+*.sym
+*.img
+vectors.S
+bootblock
+entryother
+initcode
+initcode.out
+kernel
+kernelmemfs
+mkfs
+.gdbinit
diff -ruN xv6-public/.vscode/settings.json x/.vscode/settings.json
--- xv6-public/.vscode/settings.json	1970-01-01 05:30:00.000000000 +0530
+++ x/.vscode/settings.json	2022-10-07 19:33:04.686902600 +0530
@@ -0,0 +1,6 @@
+{
+  "files.associations": {
+    "*.ejs": "html",
+    "defs.h": "c"
+  }
+}
\ No newline at end of file
diff -ruN xv6-public/Makefile x/Makefile
--- xv6-public/Makefile	2022-10-06 18:56:59.880000000 +0530
+++ x/Makefile	2022-10-07 17:56:18.359663700 +0530
@@ -181,6 +181,12 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_getNumProc\
+	_getMaxPid\
+	_getProcInfo\
+	_set_burst_time\
+	_get_burst_time\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff -ruN xv6-public/defs.h x/defs.h
--- xv6-public/defs.h	2022-10-06 18:56:59.880000000 +0530
+++ x/defs.h	2022-10-07 20:06:27.596902600 +0530
@@ -1,3 +1,4 @@
+
 struct buf;
 struct context;
 struct file;
@@ -8,6 +9,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -106,6 +108,9 @@
 int             cpuid(void);
 void            exit(void);
 int             fork(void);
+int             getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo(int, struct processInfo*);
 int             growproc(int);
 int             kill(int);
 struct cpu*     mycpu(void);
@@ -115,6 +120,8 @@
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            setproc(struct proc*);
+int             set_burst_time(int);
+int             get_burst_time(void);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(void);
diff -ruN xv6-public/getMaxPid.c x/getMaxPid.c
--- xv6-public/getMaxPid.c	1970-01-01 05:30:00.000000000 +0530
+++ x/getMaxPid.c	2022-10-06 18:55:26.100000000 +0530
@@ -0,0 +1,18 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void)
+{
+    int max_pid = getMaxPid();
+
+    if (max_pid < 0)
+    {
+        printf(1, "No processes are active in the process table.\n");
+    }
+    else
+    {
+        printf(1, "Maximum PID: %d\n", max_pid);
+    }
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/getNumProc.c x/getNumProc.c
--- xv6-public/getNumProc.c	1970-01-01 05:30:00.000000000 +0530
+++ x/getNumProc.c	2022-10-06 18:55:26.110000000 +0530
@@ -0,0 +1,11 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void)
+{
+    int max_pid = getNumProc();
+
+    printf(1, "Number of active processes: %d\n", max_pid);
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/getProcInfo.c x/getProcInfo.c
--- xv6-public/getProcInfo.c	1970-01-01 05:30:00.000000000 +0530
+++ x/getProcInfo.c	2022-10-06 18:55:26.100000000 +0530
@@ -0,0 +1,28 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[])
+{
+    if(argc < 2){
+        printf(2, "Usage: getProcInfo\n");
+        exit();
+    }
+
+    for(int i = 1; i < argc; i++){
+        struct processInfo* pinfo;
+
+        pinfo = (struct processInfo*) malloc(sizeof(struct processInfo));
+
+        if(getProcInfo(atoi(argv[i]), pinfo) < 0){
+            printf(2, "getProcInfo: %s failed.\n", argv[i]);
+            break;
+        }
+
+        printf(1, "PPID: %d\n", pinfo->ppid);
+        printf(1, "PSize: %d\n", pinfo->psize);
+        printf(1, "Context Switches: %d\n", pinfo->numberContextSwitches);
+    }
+
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/get_burst_time.c x/get_burst_time.c
--- xv6-public/get_burst_time.c	1970-01-01 05:30:00.000000000 +0530
+++ x/get_burst_time.c	2022-10-07 12:13:40.674311600 +0530
@@ -0,0 +1,14 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char* argv[]){
+    if(argc != 1){
+        printf(2, "Usage: get_burst_time...\n");
+		exit();
+    }
+
+	printf(1, "Burst time=%d\n", get_burst_time());
+
+	exit();
+}
diff -ruN xv6-public/param.h x/param.h
--- xv6-public/param.h	2022-10-06 18:56:59.890000000 +0530
+++ x/param.h	2022-10-07 14:39:15.518435200 +0530
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
diff -ruN xv6-public/proc.c x/proc.c
--- xv6-public/proc.c	2022-10-06 18:56:59.890000000 +0530
+++ x/proc.c	2022-10-07 20:40:02.806902600 +0530
@@ -6,10 +6,12 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
-struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
+struct
+{
+	struct spinlock lock;
+	struct proc proc[NPROC];
 } ptable;
 
 static struct proc *initproc;
@@ -20,339 +22,402 @@
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+void pinit(void)
 {
-  initlock(&ptable.lock, "ptable");
+	initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+	return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
-  int apicid, i;
-  
-  if(readeflags()&FL_IF)
-    panic("mycpu called with interrupts enabled\n");
-  
-  apicid = lapicid();
-  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
-  // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
-    if (cpus[i].apicid == apicid)
-      return &cpus[i];
-  }
-  panic("unknown apicid\n");
+	int apicid, i;
+
+	if (readeflags() & FL_IF)
+		panic("mycpu called with interrupts enabled\n");
+
+	apicid = lapicid();
+	// APIC IDs are not guaranteed to be contiguous. Maybe we should have
+	// a reverse map, or reserve a register to store &cpus[i].
+	for (i = 0; i < ncpu; ++i)
+	{
+		if (cpus[i].apicid == apicid)
+			return &cpus[i];
+	}
+	panic("unknown apicid\n");
 }
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
-  struct cpu *c;
-  struct proc *p;
-  pushcli();
-  c = mycpu();
-  p = c->proc;
-  popcli();
-  return p;
-}
-
-//PAGEBREAK: 32
-// Look in the process table for an UNUSED proc.
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
+struct proc *
+myproc(void)
+{
+	struct cpu *c;
+	struct proc *p;
+	pushcli();
+	c = mycpu();
+	p = c->proc;
+	popcli();
+	return p;
+}
+
+// PAGEBREAK: 32
+//  Look in the process table for an UNUSED proc.
+//  If found, change state to EMBRYO and initialize
+//  state required to run in the kernel.
+//  Otherwise return 0.
+static struct proc *
 allocproc(void)
 {
-  struct proc *p;
-  char *sp;
+	struct proc *p;
+	char *sp;
 
-  acquire(&ptable.lock);
+	acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+		if (p->state == UNUSED)
+			goto found;
 
-  release(&ptable.lock);
-  return 0;
+	release(&ptable.lock);
+	return 0;
 
 found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
+	p->state = EMBRYO;
+	p->pid = nextpid++;
 
-  release(&ptable.lock);
+	release(&ptable.lock);
 
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-    p->state = UNUSED;
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
-
-  // Set up new context to start executing at forkret,
-  // which returns to trapret.
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-  p->context->eip = (uint)forkret;
-
-  return p;
-}
-
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
-{
-  struct proc *p;
-  extern char _binary_initcode_start[], _binary_initcode_size[];
-
-  p = allocproc();
-  
-  initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
-    panic("userinit: out of memory?");
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-  p->sz = PGSIZE;
-  memset(p->tf, 0, sizeof(*p->tf));
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-  p->tf->es = p->tf->ds;
-  p->tf->ss = p->tf->ds;
-  p->tf->eflags = FL_IF;
-  p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
-
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
-
-  // this assignment to p->state lets other cores
-  // run this process. the acquire forces the above
-  // writes to be visible, and the lock is also needed
-  // because the assignment might not be atomic.
-  acquire(&ptable.lock);
+	// Allocate kernel stack.
+	if ((p->kstack = kalloc()) == 0)
+	{
+		p->state = UNUSED;
+		return 0;
+	}
+	sp = p->kstack + KSTACKSIZE;
+
+	p->contextSwitches = 0; // set contextSwitches to zero initially
+	p->burst = 0; // set burst time to 0 indicating unknown burst time
+	p->time_slice = 0;
+
+	// Leave room for trap frame.
+	sp -= sizeof *p->tf;
+	p->tf = (struct trapframe *)sp;
+
+	// Set up new context to start executing at forkret,
+	// which returns to trapret.
+	sp -= 4;
+	*(uint *)sp = (uint)trapret;
+
+	sp -= sizeof *p->context;
+	p->context = (struct context *)sp;
+	memset(p->context, 0, sizeof *p->context);
+	p->context->eip = (uint)forkret;
+
+	return p;
+}
+
+// PAGEBREAK: 32
+//  Set up first user process.
+void userinit(void)
+{
+	struct proc *p;
+	extern char _binary_initcode_start[], _binary_initcode_size[];
+
+	p = allocproc();
+
+	initproc = p;
+	if ((p->pgdir = setupkvm()) == 0)
+		panic("userinit: out of memory?");
+	inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+	p->sz = PGSIZE;
+	memset(p->tf, 0, sizeof(*p->tf));
+	p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+	p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+	p->tf->es = p->tf->ds;
+	p->tf->ss = p->tf->ds;
+	p->tf->eflags = FL_IF;
+	p->tf->esp = PGSIZE;
+	p->tf->eip = 0; // beginning of initcode.S
+
+	safestrcpy(p->name, "initcode", sizeof(p->name));
+	p->cwd = namei("/");
+
+	// this assignment to p->state lets other cores
+	// run this process. the acquire forces the above
+	// writes to be visible, and the lock is also needed
+	// because the assignment might not be atomic.
+	acquire(&ptable.lock);
 
-  p->state = RUNNABLE;
+	p->state = RUNNABLE;
 
-  release(&ptable.lock);
+	release(&ptable.lock);
 }
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
-  uint sz;
-  struct proc *curproc = myproc();
+	uint sz;
+	struct proc *curproc = myproc();
 
-  sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  }
-  curproc->sz = sz;
-  switchuvm(curproc);
-  return 0;
+	sz = curproc->sz;
+	if (n > 0)
+	{
+		if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+			return -1;
+	}
+	else if (n < 0)
+	{
+		if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+			return -1;
+	}
+	curproc->sz = sz;
+	switchuvm(curproc);
+	return 0;
 }
 
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
-  int i, pid;
-  struct proc *np;
-  struct proc *curproc = myproc();
+	int i, pid;
+	struct proc *np;
+	struct proc *curproc = myproc();
 
-  // Allocate process.
-  if((np = allocproc()) == 0){
-    return -1;
-  }
+	// Allocate process.
+	if ((np = allocproc()) == 0)
+	{
+		return -1;
+	}
 
-  // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-    kfree(np->kstack);
-    np->kstack = 0;
-    np->state = UNUSED;
-    return -1;
-  }
-  np->sz = curproc->sz;
-  np->parent = curproc;
-  *np->tf = *curproc->tf;
+	// Copy process state from proc.
+	if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+	{
+		kfree(np->kstack);
+		np->kstack = 0;
+		np->state = UNUSED;
+		return -1;
+	}
+	np->sz = curproc->sz;
+	np->parent = curproc;
+	*np->tf = *curproc->tf;
 
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
+	// Clear %eax so that fork returns 0 in the child.
+	np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
-      np->ofile[i] = filedup(curproc->ofile[i]);
-  np->cwd = idup(curproc->cwd);
+	for (i = 0; i < NOFILE; i++)
+		if (curproc->ofile[i])
+			np->ofile[i] = filedup(curproc->ofile[i]);
+	np->cwd = idup(curproc->cwd);
 
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
 
-  pid = np->pid;
+	pid = np->pid;
 
-  acquire(&ptable.lock);
+	acquire(&ptable.lock);
 
-  np->state = RUNNABLE;
+	np->state = RUNNABLE;
 
-  release(&ptable.lock);
+	release(&ptable.lock);
 
-  return pid;
+	return pid;
 }
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
-  struct proc *curproc = myproc();
-  struct proc *p;
-  int fd;
-
-  if(curproc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
-    }
-  }
-
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
-
-  acquire(&ptable.lock);
-
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
-
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
-    }
-  }
-
-  // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
+	struct proc *curproc = myproc();
+	struct proc *p;
+	int fd;
+
+	if (curproc == initproc)
+		panic("init exiting");
+
+	// Close all open files.
+	for (fd = 0; fd < NOFILE; fd++)
+	{
+		if (curproc->ofile[fd])
+		{
+			fileclose(curproc->ofile[fd]);
+			curproc->ofile[fd] = 0;
+		}
+	}
+
+	begin_op();
+	iput(curproc->cwd);
+	end_op();
+	curproc->cwd = 0;
+
+	acquire(&ptable.lock);
+
+	// Parent might be sleeping in wait().
+	wakeup1(curproc->parent);
+
+	// Pass abandoned children to init.
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if (p->parent == curproc)
+		{
+			p->parent = initproc;
+			if (p->state == ZOMBIE)
+				wakeup1(initproc);
+		}
+	}
+
+	// Jump into the scheduler, never to return.
+	curproc->state = ZOMBIE;
+	sched();
+	panic("zombie exit");
 }
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(void)
 {
-  struct proc *p;
-  int havekids, pid;
-  struct proc *curproc = myproc();
-  
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for exited children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
-        continue;
-      havekids = 1;
-      if(p->state == ZOMBIE){
-        // Found one.
-        pid = p->pid;
-        kfree(p->kstack);
-        p->kstack = 0;
-        freevm(p->pgdir);
-        p->pid = 0;
-        p->parent = 0;
-        p->name[0] = 0;
-        p->killed = 0;
-        p->state = UNUSED;
-        release(&ptable.lock);
-        return pid;
-      }
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
-      release(&ptable.lock);
-      return -1;
-    }
-
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-  }
-}
-
-//PAGEBREAK: 42
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  c->proc = 0;
-  
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
-    }
-    release(&ptable.lock);
-
-  }
+	struct proc *p;
+	int havekids, pid;
+	struct proc *curproc = myproc();
+
+	acquire(&ptable.lock);
+	for (;;)
+	{
+		// Scan through table looking for exited children.
+		havekids = 0;
+		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+		{
+			if (p->parent != curproc)
+				continue;
+			havekids = 1;
+			if (p->state == ZOMBIE)
+			{
+				// Found one.
+				pid = p->pid;
+				kfree(p->kstack);
+				p->kstack = 0;
+				freevm(p->pgdir);
+				p->pid = 0;
+				p->parent = 0;
+				p->name[0] = 0;
+				p->killed = 0;
+				p->state = UNUSED;
+				release(&ptable.lock);
+				return pid;
+			}
+		}
+
+		// No point waiting if we don't have any children.
+		if (!havekids || curproc->killed)
+		{
+			release(&ptable.lock);
+			return -1;
+		}
+
+		// Wait for children to exit.  (See wakeup1 call in proc_exit.)
+		sleep(curproc, &ptable.lock); // DOC: wait-sleep
+	}
+}
+
+// PAGEBREAK: 42
+//  Per-CPU process scheduler.
+//  Each CPU calls scheduler() after setting itself up.
+//  Scheduler never returns.  It loops, doing:
+//   - choose a process to run
+//   - swtch to start running that process
+//   - eventually that process transfers control
+//       via swtch back to the scheduler.
+void scheduler(void)
+{
+	struct proc *p;
+	struct cpu *c = mycpu();
+	c->proc = 0;
+	struct proc* RQ[NPROC];
+	int num_stale = 0; // number of processes left in the ready queue
+	int num_p = 0; // total processes in RQ at the time of insertion
+
+	for (;;)
+	{
+		// Enable interrupts on this processor.
+		sti();
+
+		// Loop over process table looking for process to run.
+		acquire(&ptable.lock);
+
+		// first refill the RQ if no processes left to execute
+		if(num_stale == num_p){
+			// first store all runnable processes in the RQ array
+			num_p = 0;
+			for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+				if (p->state == RUNNABLE)
+					RQ[num_p++] = p;
+			}
+			num_stale = 0;
+
+			if(num_p == 0){
+				release(&ptable.lock);
+				continue;
+			}
+
+			// Sort Ready Queue
+			struct proc *t;
+			for (int i = 0; i < num_p; i++)
+			{
+				for(int j = i + 1; j < num_p; j++)
+				{
+					if(RQ[i]->burst > RQ[j]->burst)
+					{
+						t = RQ[i];
+						RQ[i] = RQ[j];
+						RQ[j] = t;
+					}
+				}
+			}
+
+			int i=0;
+			// now we set the time quanta value
+			int quanta_val = 0;
+			while(quanta_val==0 && i<num_p){
+				quanta_val = RQ[i++]->burst;
+			}
+			if(quanta_val==0 ) quanta_val = 1;
+			for(i=0; i<num_p; i++){
+				RQ[i]->quanta_val = quanta_val;
+			}
+		} else {
+			num_stale = 0;
+		}
+
+		for(int i=0; i<num_p; i++){
+			p = RQ[i];
+			if(p->state != RUNNABLE) { num_stale++; continue;}
+
+			// Switch to chosen process.  It is the process's job
+			// to release ptable.lock and then reacquire it
+			// before jumping back to us.
+			c->proc = p;
+			switchuvm(p);
+			p->state = RUNNING;
+
+			swtch(&(c->scheduler), p->context);
+			p->contextSwitches++;
+
+			switchkvm();
+
+			// Process is done running for now.
+			// It should have changed its p->state before coming back.
+			c->proc = 0;
+		}
+		release(&ptable.lock);
+	}
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -362,173 +427,248 @@
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
-  int intena;
-  struct proc *p = myproc();
+	int intena;
+	struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
-    panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
-    panic("sched locks");
-  if(p->state == RUNNING)
-    panic("sched running");
-  if(readeflags()&FL_IF)
-    panic("sched interruptible");
-  intena = mycpu()->intena;
-  swtch(&p->context, mycpu()->scheduler);
-  mycpu()->intena = intena;
+	if (!holding(&ptable.lock))
+		panic("sched ptable.lock");
+	if (mycpu()->ncli != 1)
+		panic("sched locks");
+	if (p->state == RUNNING)
+		panic("sched running");
+	if (readeflags() & FL_IF)
+		panic("sched interruptible");
+	intena = mycpu()->intena;
+	swtch(&p->context, mycpu()->scheduler);
+	mycpu()->intena = intena;
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
-  sched();
-  release(&ptable.lock);
+	acquire(&ptable.lock); // DOC: yieldlock
+	myproc()->state = RUNNABLE;
+	sched();
+	release(&ptable.lock);
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-
-  if (first) {
-    // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot
-    // be run from main().
-    first = 0;
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
+	static int first = 1;
+	// Still holding ptable.lock from scheduler.
+	release(&ptable.lock);
+
+	if (first)
+	{
+		// Some initialization functions must be run in the context
+		// of a regular process (e.g., they call sleep), and thus cannot
+		// be run from main().
+		first = 0;
+		iinit(ROOTDEV);
+		initlog(ROOTDEV);
+	}
 
-  // Return to "caller", actually trapret (see allocproc).
+	// Return to "caller", actually trapret (see allocproc).
 }
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
-  struct proc *p = myproc();
-  
-  if(p == 0)
-    panic("sleep");
-
-  if(lk == 0)
-    panic("sleep without lk");
-
-  // Must acquire ptable.lock in order to
-  // change p->state and then call sched.
-  // Once we hold ptable.lock, we can be
-  // guaranteed that we won't miss any wakeup
-  // (wakeup runs with ptable.lock locked),
-  // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
-    release(lk);
-  }
-  // Go to sleep.
-  p->chan = chan;
-  p->state = SLEEPING;
-
-  sched();
-
-  // Tidy up.
-  p->chan = 0;
-
-  // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-    release(&ptable.lock);
-    acquire(lk);
-  }
-}
+	struct proc *p = myproc();
 
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
+	if (p == 0)
+		panic("sleep");
+
+	if (lk == 0)
+		panic("sleep without lk");
+
+	// Must acquire ptable.lock in order to
+	// change p->state and then call sched.
+	// Once we hold ptable.lock, we can be
+	// guaranteed that we won't miss any wakeup
+	// (wakeup runs with ptable.lock locked),
+	// so it's okay to release lk.
+	if (lk != &ptable.lock)
+	{						   // DOC: sleeplock0
+		acquire(&ptable.lock); // DOC: sleeplock1
+		release(lk);
+	}
+	// Go to sleep.
+	p->chan = chan;
+	p->state = SLEEPING;
+
+	sched();
+
+	// Tidy up.
+	p->chan = 0;
+
+	// Reacquire original lock.
+	if (lk != &ptable.lock)
+	{ // DOC: sleeplock2
+		release(&ptable.lock);
+		acquire(lk);
+	}
+}
+
+// PAGEBREAK!
+//  Wake up all processes sleeping on chan.
+//  The ptable lock must be held.
 static void
 wakeup1(void *chan)
 {
-  struct proc *p;
+	struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+		if (p->state == SLEEPING && p->chan == chan)
+			p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
-  acquire(&ptable.lock);
-  wakeup1(chan);
-  release(&ptable.lock);
+	acquire(&ptable.lock);
+	wakeup1(chan);
+	release(&ptable.lock);
 }
 
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
-  struct proc *p;
+	struct proc *p;
 
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
-      release(&ptable.lock);
-      return 0;
-    }
-  }
-  release(&ptable.lock);
-  return -1;
-}
-
-//PAGEBREAK: 36
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
-{
-  static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-      state = states[p->state];
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-  }
+	acquire(&ptable.lock);
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if (p->pid == pid)
+		{
+			p->killed = 1;
+			// Wake process from sleep if necessary.
+			if (p->state == SLEEPING)
+				p->state = RUNNABLE;
+			release(&ptable.lock);
+			return 0;
+		}
+	}
+	release(&ptable.lock);
+	return -1;
+}
+
+// PAGEBREAK: 36
+//  Print a process listing to console.  For debugging.
+//  Runs when user types ^P on console.
+//  No lock to avoid wedging a stuck machine further.
+void procdump(void)
+{
+	static char *states[] = {
+		[UNUSED] "unused",
+		[EMBRYO] "embryo",
+		[SLEEPING] "sleep ",
+		[RUNNABLE] "runble",
+		[RUNNING] "run   ",
+		[ZOMBIE] "zombie"};
+	int i;
+	struct proc *p;
+	char *state;
+	uint pc[10];
+
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if (p->state == UNUSED)
+			continue;
+		if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+			state = states[p->state];
+		else
+			state = "???";
+		cprintf("%d %s %s", p->pid, state, p->name);
+		if (p->state == SLEEPING)
+		{
+			getcallerpcs((uint *)p->context->ebp + 2, pc);
+			for (i = 0; i < 10 && pc[i] != 0; i++)
+				cprintf(" %p", pc[i]);
+		}
+		cprintf("\n");
+	}
+}
+
+int getNumProc(void)
+{
+	int num_processes = 0;
+
+	struct proc *p;
+
+	acquire(&ptable.lock);
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if (p->state != UNUSED)
+		{
+			num_processes++;
+		}
+	}
+	release(&ptable.lock);
+
+	return num_processes;
+}
+
+int getMaxPid(void)
+{
+	int max_pid = -1;
+	struct proc *p;
+
+	acquire(&ptable.lock);
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if (p->state != UNUSED)
+			if(p->pid > max_pid){
+				max_pid = p->pid;
+			}
+	}
+	release(&ptable.lock);
+	return max_pid;
+}
+
+int getProcInfo(int targetPid, struct processInfo *pinfo)
+{
+	struct proc *p;
+	int processFound = 0;
+
+	acquire(&ptable.lock);
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if (p->pid != targetPid)
+			continue;
+
+		processFound = 1;
+
+		if (p->parent != 0)
+			pinfo->ppid = p->parent->pid;
+		pinfo->psize = p->sz;
+		pinfo->numberContextSwitches = p->contextSwitches;
+		break;
+	}
+	release(&ptable.lock);
+
+	if (processFound == 0)
+		return -1; //error
+
+	return 0; //success
+}
+
+int set_burst_time(int n){
+	myproc()->burst = n;
+
+	//skip one CPU scheduling round
+	yield();
+	return 0;
 }
+
+int get_burst_time(void) {
+	return myproc()->burst;
+}
+
diff -ruN xv6-public/proc.h x/proc.h
--- xv6-public/proc.h	2022-10-06 18:56:59.890000000 +0530
+++ x/proc.h	2022-10-07 20:06:46.036902600 +0530
@@ -41,6 +41,8 @@
   char *kstack;                // Bottom of kernel stack for this process
   enum procstate state;        // Process state
   int pid;                     // Process ID
+  int burst;                   // Burst time of the process
+  int contextSwitches;         // number of times a context switch happens
   struct proc *parent;         // Parent process
   struct trapframe *tf;        // Trap frame for current syscall
   struct context *context;     // swtch() here to run process
@@ -49,6 +51,8 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int time_slice;              // time slice number
+  int quanta_val;              // value of time quanta
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -ruN xv6-public/processInfo.h x/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ x/processInfo.h	2022-10-06 18:55:26.110000000 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
diff -ruN xv6-public/set_burst_time.c x/set_burst_time.c
--- xv6-public/set_burst_time.c	1970-01-01 05:30:00.000000000 +0530
+++ x/set_burst_time.c	2022-10-06 18:55:26.100000000 +0530
@@ -0,0 +1,21 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char* argv[]){
+    if(argc < 2){
+        printf(2, "Usage: set_burst_time...\n");
+		exit();
+    }
+
+	int n = atoi(argv[1]);
+
+	if(set_burst_time(n) < 0){
+		printf(2, "set_burst_time failed to execute\n");
+		exit();
+	}
+
+	printf(1, "Burst time set to %d\n", get_burst_time());
+
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/syscall.c x/syscall.c
--- xv6-public/syscall.c	2022-10-06 18:56:59.890000000 +0530
+++ x/syscall.c	2022-10-06 18:55:26.140000000 +0530
@@ -103,6 +103,11 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc]   sys_getNumProc,
+[SYS_getMaxPid]    sys_getMaxPid,
+[SYS_getProcInfo]  sys_getProcInfo,
+[SYS_set_burst_time]  sys_set_burst_time,
+[SYS_get_burst_time]  sys_get_burst_time
 };
 
 void
diff -ruN xv6-public/syscall.h x/syscall.h
--- xv6-public/syscall.h	2022-10-06 18:56:59.890000000 +0530
+++ x/syscall.h	2022-10-06 18:55:26.140000000 +0530
@@ -1,22 +1,27 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
+#define SYS_fork 1
+#define SYS_exit 2
+#define SYS_wait 3
+#define SYS_pipe 4
+#define SYS_read 5
+#define SYS_kill 6
+#define SYS_exec 7
+#define SYS_fstat 8
+#define SYS_chdir 9
+#define SYS_dup 10
 #define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
+#define SYS_sbrk 12
+#define SYS_sleep 13
 #define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
+#define SYS_open 15
+#define SYS_write 16
+#define SYS_mknod 17
 #define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_link 19
+#define SYS_mkdir 20
+#define SYS_close 21
+#define SYS_getNumProc 22
+#define SYS_getMaxPid 23
+#define SYS_getProcInfo 24
+#define SYS_set_burst_time 25
+#define SYS_get_burst_time 26
diff -ruN xv6-public/sysproc.c x/sysproc.c
--- xv6-public/sysproc.c	2022-10-06 18:56:59.890000000 +0530
+++ x/sysproc.c	2022-10-07 12:09:25.754311600 +0530
@@ -7,85 +7,129 @@
 #include "mmu.h"
 #include "proc.h"
 
-int
-sys_fork(void)
+int sys_fork(void)
 {
-  return fork();
+	return fork();
 }
 
-int
-sys_exit(void)
+int sys_exit(void)
 {
-  exit();
-  return 0;  // not reached
+	exit();
+	return 0; // not reached
 }
 
-int
-sys_wait(void)
+int sys_wait(void)
 {
-  return wait();
+	return wait();
 }
 
-int
-sys_kill(void)
+int sys_kill(void)
 {
-  int pid;
+	int pid;
 
-  if(argint(0, &pid) < 0)
-    return -1;
-  return kill(pid);
+	if (argint(0, &pid) < 0)
+		return -1;
+	return kill(pid);
 }
 
-int
-sys_getpid(void)
+int sys_getpid(void)
 {
-  return myproc()->pid;
+	return myproc()->pid;
 }
 
-int
-sys_sbrk(void)
+int sys_sbrk(void)
 {
-  int addr;
-  int n;
+	int addr;
+	int n;
 
-  if(argint(0, &n) < 0)
-    return -1;
-  addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
-  return addr;
+	if (argint(0, &n) < 0)
+		return -1;
+	addr = myproc()->sz;
+	if (growproc(n) < 0)
+		return -1;
+	return addr;
 }
 
-int
-sys_sleep(void)
+int sys_sleep(void)
 {
-  int n;
-  uint ticks0;
+	int n;
+	uint ticks0;
 
-  if(argint(0, &n) < 0)
-    return -1;
-  acquire(&tickslock);
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
-      release(&tickslock);
-      return -1;
-    }
-    sleep(&ticks, &tickslock);
-  }
-  release(&tickslock);
-  return 0;
+	if (argint(0, &n) < 0)
+		return -1;
+	acquire(&tickslock);
+	ticks0 = ticks;
+	while (ticks - ticks0 < n)
+	{
+		if (myproc()->killed)
+		{
+			release(&tickslock);
+			return -1;
+		}
+		sleep(&ticks, &tickslock);
+	}
+	release(&tickslock);
+	return 0;
 }
 
 // return how many clock tick interrupts have occurred
 // since start.
-int
-sys_uptime(void)
+int sys_uptime(void)
 {
-  uint xticks;
+	uint xticks;
 
-  acquire(&tickslock);
-  xticks = ticks;
-  release(&tickslock);
-  return xticks;
+	acquire(&tickslock);
+	xticks = ticks;
+	release(&tickslock);
+	return xticks;
+}
+
+int sys_getNumProc(void)
+{
+	return getNumProc();
+}
+
+int sys_getMaxPid(void)
+{
+	return getMaxPid();
+}
+
+int sys_getProcInfo(void)
+{
+
+	int pid;
+	struct processInfo *pinfo;
+
+	if (argint(0, &pid) < 0)
+	{
+		return -1;
+	}
+
+	if (argptr(1, (void *)&pinfo, sizeof(pinfo)) < 0)
+	{
+		return -1;
+	}
+
+	return getProcInfo(pid, pinfo);
+}
+
+int sys_set_burst_time(void)
+{
+	int burst_time;
+	if (argint(0, &burst_time) < 0)
+	{
+		return -1;
+	}
+
+	if (burst_time <= 0)
+	{
+		return -1;
+	}
+
+	return set_burst_time(burst_time);
+}
+
+int sys_get_burst_time(void)
+{
+	return get_burst_time();
 }
diff -ruN xv6-public/test.c x/test.c
--- xv6-public/test.c	1970-01-01 05:30:00.000000000 +0530
+++ x/test.c	2022-10-07 18:59:07.196812100 +0530
@@ -0,0 +1,60 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+static int x;
+
+int sample_vals[15] = {30, 20, 10, 40, 70, 11, 35, 39, 60, 61, 73, 77, 41, 15, 25};
+int get_random(){
+  return sample_vals[(x++)%15];
+}
+
+int main(){
+  // get a list of burst times
+  int burst_vals[10];
+  x = getpid()%15;
+  for(int i=0; i<10; i++){
+    burst_vals[i] = get_random();
+  }
+
+  printf(1, "PID\t Process type\t  Burst Time\tContext Switches\n");
+  printf(1, "---\t ------------\t  ----- ----\t------- --------\n");
+
+  for(int i=0; i<10; i++){
+    if(fork() == 0) {
+      if(set_burst_time(burst_vals[i]) < 0){
+        printf(2, "%d: error setting burst time", getpid());
+      }
+
+      // separate newly created processes into 
+      // 2 categories: CPU bound and IO bound
+
+      if(i%2==0){
+        // CPU bound process
+        double temp = 0;
+        for(int j=0; j<500000*burst_vals[i]; j++){
+          temp += 3.14*2.71;
+        }
+        int computed_val = ((int)temp)%9000 + 1000;
+        printf(1, "%d\t CPU Bound(%d) \t", getpid() ,computed_val);
+      } 
+      else {
+        // IO bound process
+				for(int j=0; j<10*burst_vals[i]; j++){
+					sleep(1);
+				}
+				printf(1, "%d\t IO Bound    \t\t", getpid());
+      }
+
+			struct processInfo *info = (struct processInfo*) malloc(sizeof(struct processInfo));
+			getProcInfo(getpid(), info);
+			printf(1, " %d \t  %d\n", get_burst_time(), info->numberContextSwitches);
+			exit();
+
+    }
+  }
+  // wait for all child processes to finish
+  while( wait() != -1 ) ; 
+
+  exit();
+}
\ No newline at end of file
diff -ruN xv6-public/trap.c x/trap.c
--- xv6-public/trap.c	2022-10-06 18:56:59.890000000 +0530
+++ x/trap.c	2022-10-07 20:58:24.776902600 +0530
@@ -104,7 +104,13 @@
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
      tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  {
+    (myproc()->time_slice)++;
+    if(myproc()->time_slice == myproc()->quanta_val){
+      myproc()->time_slice = 0;
+      yield();
+    }
+  }
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
diff -ruN xv6-public/user.h x/user.h
--- xv6-public/user.h	2022-10-06 18:56:59.890000000 +0530
+++ x/user.h	2022-10-06 18:55:26.140000000 +0530
@@ -1,5 +1,9 @@
+#include "processInfo.h"
+
 struct stat;
 struct rtcdate;
+struct processInfo;
+
 
 // system calls
 int fork(void);
@@ -23,6 +27,11 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int pid, struct processInfo*);
+int set_burst_time(int burst_time);
+int get_burst_time(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN xv6-public/usys.S x/usys.S
--- xv6-public/usys.S	2022-10-06 18:56:59.890000000 +0530
+++ x/usys.S	2022-10-06 18:55:26.140000000 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
\ No newline at end of file
